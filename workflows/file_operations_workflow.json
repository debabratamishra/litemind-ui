{
  "name": "File Operations Tool",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "When Called",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "read-condition",
              "leftValue": "={{$json.operation}}",
              "rightValue": "read",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-operation",
      "name": "Check Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [300, 200]
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "={{$json.file_path}}",
        "options": {}
      },
      "id": "read-file",
      "name": "Read File",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [500, 100]
    },
    {
      "parameters": {
        "operation": "write",
        "filePath": "={{$json.file_path}}",
        "fileContent": "={{$json.content}}",
        "options": {}
      },
      "id": "write-file", 
      "name": "Write File",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process file operation result\nconst operation = $input.all()[0].json.operation;\nconst filePath = $input.all()[0].json.file_path;\nconst inputData = $input.all()[0].json;\n\nlet result = {\n  operation: operation,\n  file_path: filePath,\n  timestamp: new Date().toISOString(),\n  success: true\n};\n\nif (operation === 'read') {\n  result.content = inputData.data || '';\n  result.size = (inputData.data || '').length;\n} else if (operation === 'write') {\n  result.content_written = inputData.content || '';\n  result.bytes_written = (inputData.content || '').length;\n} else {\n  result.success = false;\n  result.error = 'Unsupported operation: ' + operation;\n}\n\nreturn { json: result };"
      },
      "id": "process-file-result",
      "name": "Process File Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 200]
    }
  ],
  "connections": {
    "When Called": {
      "main": [
        [
          {
            "node": "Check Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Operation": {
      "main": [
        [
          {
            "node": "Read File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Write File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read File": {
      "main": [
        [
          {
            "node": "Process File Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write File": {
      "main": [
        [
          {
            "node": "Process File Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1"
}
